Generic single-database configuration.



Мануал по которому делал:https://www.youtube.com/watch?v=-RLXmoQ7iSE&list=PLeLN0qH0-mCVQKZ8-W1LhxDcVlWtTALCS&index=8
Как установить python 3.9.5: https://www.google.com/search?q=vscode+python+version+3.9.5&sxsrf=APwXEdeG-cZlVdOGKiO0Hrdpc0PFEQsykA%3A1680946427576&ei=-zQxZPzuIqmxrgSpzI6gDg&ved=0ahUKEwi82M61_Zn-AhWpmIsKHSmmA-QQ4dUDCA8&uact=5&oq=vscode+python+version+3.9.5&gs_lcp=Cgxnd3Mtd2l6LXNlcnAQAzIFCCEQoAEyBQghEKABOgQIIxAnOgcIABCKBRBDOgoIABCABBAUEIcCOggIABCABBCxAzoFCAAQgAQ6CwgAEIAEELEDEIMBOggIABCABBDLAToGCAAQFhAeOggIIRAWEB4QHToECCEQFUoECEEYAFAAWPtSYLlUaABwAXgAgAF9iAGjDZIBBDIyLjKYAQCgAQHAAQE&sclient=gws-wiz-serp#fpstate=ive&vld=cid:fc5faac6,vid:maaYOr4tnKM



Для перехода в терминал докера под root: 
docker exec -u root -t -i container_number bash



для того, запустить приложения предварительно нужно выполнить команды:
pip install virtualenv        -- для windows
или
apt install python3.9-venv    -- для linux 


Создать проект с virtualenv и определённой версией python можно командой 
virtualenv -p <path-to-new-python-installation> <new-venv-name>     -- для linux
python3 -m venv env
virtualenv venv                                                    -- для windows


source venv/bin/activate   -- для linux
venv/scripts/activate      -- для windows

Как запустить virtualenv для конкретной версии python акутал для linux решение из: https://stackoverflow.com/questions/70422866/how-to-create-a-venv-with-a-different-python-version

pip install fastapi
pip install sqlalchemy
pip install pymysql
pip install cryptography
pip install pandas
pip install pydantic
pip install alembic
pip install psycopg2-binary
pip3 install python-dotenv
pip install requests
pip install bs4
pip install psycopg2


docker run --name mysqldb -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=test mysql    -- Создание бд test в контейнере

docker run --name testposgredb -p 5432:5432 -e POSTGRES_DB=test -e POSTGRES_PASSWORD=password -e POSTGRES_DB=test -e POSTGRES_USER=root -d postgres


pip install uvicorn   --после перезапусти vscode или что там у тебя на свякий случай
uvicorn main:app --reload      -- запуск приложухи


API будет находится по адресу: http://127.0.0.1:8000/docs

Для создания докер образа и его запуска:
1) Перейти в корневую директорию проекта
2) Ввести команду для сбора зависимовстей pipreqs /project_path -- делается один раз
    Для винды ввести команду с кодировкой pipreqs --encoding=utf-8 C:\Users\Ruslan\Desktop\fastapi_course-main\Lesson_07
3) Ввести команду для сборки образа: docker build . -t fastapi_app:latest
4) Запустить докер контейнер командой: docker run -d -p 7329:8000 fastapi_app   


Для миграции в posgresql
1) alembic init migration     -- создаётся файл alembic.ini и папка migration
2) alembic revision --autogenerate -m "comment"  -- создаётся файл с миграцией и таблицы добавляются в бд
3) alembic upgrade <revision_number>  -- миграция бд к указанной версии бд
после этого появятся таблички

После создание бд необходимо создать роли:
insert into role values (1, 'user', null), (2, 'admin', null)
select * from role

Создать типы инструментов:
insert into instument_type values (1, 'Акции'), (2, 'Облигации'), (3, 'Валюта'), (4, 'Металлы'), (5, 'Фьючерсы');
select * from instument_type

Создать типы валют:
insert into currency_type  values (1, 'EUR', 88.0), (2, 'USD', 81.0), (3, 'CHY', 11.0), (4, 'HKD', 8.0), (5, 'RUB', 1.0);
select * from currency_type

Создать типы операций:
insert into operation_type values (1, 'Покупка'), (2, 'Продажа');
select * from operation_type

Шаблон для создания инструментов
{
  "id": 75345,
  "instrument_name": "Apple",
  "price": 80.0,
  "currency_id": 2,
  "quantity": 5,
  "figi": "A",
  "date": "2023-04-16T11:57:33.986",
  "instrument_type_id": 1,
  "account_id": 1,
  "operation_type_id": 1
}

Для реализации логики покупки и продажи инструментов используются триггеры:
- update_total_quantity_and_avg_price()
- check_quantity_trigger()
- prevent_zero_values()
- insert_instrument()
-----------------------------------------------------------------------------------------------------------------------------------------------------
ПРОМТ (прочитай полностью, чтобы понять логику)
Свещенный триггер которая реализует логику:
Точнее это промт, который я использовал)))

Напиши один триггер для базы данных posgresql, который будет выполняться следующую логику:

    Если добавляется запись в с типом операции операцией operation_type_id=1 в таблицу instrument, то срабатывает триггер и смотрит, есть ли уже записи с совпадающими полями в таблице total_quantity_and_avg_price_instrument_account:
    -именем(instrument_name)
    -счётом(account_id)
    Если нет, то добавляется запись в таблицу total_quantity_and_avg_price_instrument_account со значениями
    -instrument_name(совпадает с полем instrument_name в таблице instrument),
    -total_quantity(совпадает с полем quantity в таблице instrument),
    -avg_price(совпадает с полем price в таблице instrument) должно быть заполнено в таблице total_quantity_and_avg_price_instrument_account ,
    -currency_id(совпадает с полем currency_id в таблице instrument)
    -account_id(совпадает с полем account_id таблице instrument)
    -instrument_type_id(совпадает с полем instrument_type_id в таблице instrument) должно быть заполнено в таблице total_quantity_and_avg_price_instrument_account
    Если запись, с совпадающими полями
    -instrument_name
    -account_id
    в таблице total_quantity_and_avg_price_instrument_account уже есть, то обновляется запись с совпадающим значением instrument_name и account_id прибавляется значение total_quantity, на ту величину, которая была добавлена в новой записи в таблицу instrument, а в avg_price рассчитывается средневзвешанная цена на счёту между прошлым значением и добавленным и обновившегося количества
    Если добавляется запись с типом операции операцией operation_type_id=2 в таблицу instrument, то срабатывает триггер и смотрит, есть ли уже записи с совпадающими полями в таблице total_quantity_and_avg_price_instrument_account:
    -instrument_name(совпадает с полем instrument_name в таблице instrument),
    -счётом(account_id)
    Если запись, с совпадающими полями
    -instrument_name
    -account_id
    в таблице total_quantity_and_avg_price_instrument_account уже есть, то выполняется проверка,если total_quantity будет = 0, тогда удалить эту запись из таблицы total_quantity_and_avg_price_instrument_account, а если total_quantity будет не равно 0, то обновляется запись с совпадающим значением instrument_name и account_id, то вычитается значение total_quantity, на ту величину, которая была добавлена в новой записи в таблицу instrument, а в avg_price рассчитывается средневзвешанная цена на счёту между прошлым значением и добавленным и обновившегося количества
    Есть таблица в базе данных posgresql созданная скриптом, из которой необходимо будет взять данные для хранимой процедуры:
    CREATE TABLE public.instrument (
    id serial4 NOT NULL,
    instrument_name varchar NOT NULL,
    price float8 NOT NULL,
    currency_id int4 NOT NULL,
    quantity int4 NULL,
    figi varchar NULL,
    "date" timestamp NULL,
    instrument_type_id int4 NOT NULL,
    account_id int4 NULL,
    CONSTRAINT instrument_pkey PRIMARY KEY (id),
    CONSTRAINT instrument_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.account(id),
    CONSTRAINT instrument_currency_id_fkey FOREIGN KEY (currency_id) REFERENCES public.currency_type(id),
    CONSTRAINT instrument_instrument_type_id_fkey FOREIGN KEY (instrument_type_id) REFERENCES public.instrument_type(id)
    );
    Есть таблица В которую триггер должен вносить значения, сделанная с помощью скрипта:
    CREATE TABLE public.total_quantity_and_avg_price_instrument_account (
    id serial4 NOT NULL,
    instrument_name varchar,
    --figi varchar ,
    total_quantity int4 ,
    avg_price float8 ,
    currency_id int4 ,
    account_id int4 ,
    instrument_type_id int4 ,
    CONSTRAINT total_quantity_and_avg_price_instrument_account_pkey PRIMARY KEY (id),
    CONSTRAINT total_quantity_and_avg_price_instrument_account_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.account(id)
    );

И сам долгожданный триггер, который выполняет логику из промта выше:
    CREATE OR REPLACE FUNCTION update_total_quantity_and_avg_price()
    RETURNS TRIGGER AS $$
    DECLARE
        existing_row public.total_quantity_and_avg_price_instrument_account%rowtype;
    BEGIN
        IF NEW.operation_type_id = 1 THEN -- добавление записи
            SELECT INTO existing_row *
            FROM public.total_quantity_and_avg_price_instrument_account
            WHERE instrument_name = NEW.instrument_name AND account_id = NEW.account_id;
            
            IF NOT FOUND THEN -- запись не найдена, добавляем новую
                INSERT INTO public.total_quantity_and_avg_price_instrument_account
                    (instrument_name, total_quantity, avg_price, currency_id, account_id, instrument_type_id)
                VALUES
                    (NEW.instrument_name, NEW.quantity, NEW.price, NEW.currency_id, NEW.account_id, NEW.instrument_type_id);
            ELSE -- запись найдена, обновляем
                UPDATE public.total_quantity_and_avg_price_instrument_account
                SET 
                    total_quantity = existing_row.total_quantity + NEW.quantity,
                    avg_price = (existing_row.avg_price * existing_row.total_quantity + NEW.price * NEW.quantity) / (existing_row.total_quantity + NEW.quantity)
                WHERE id = existing_row.id;
            END IF;
        ELSIF NEW.operation_type_id = 2 THEN -- удаление записи
            SELECT INTO existing_row *
            FROM public.total_quantity_and_avg_price_instrument_account
            WHERE instrument_name = NEW.instrument_name AND account_id = NEW.account_id;
            
            IF NOT FOUND THEN -- запись не найдена, ничего не делаем
                RETURN NEW;
            ELSE -- запись найдена, обновляем или удаляем
                IF existing_row.total_quantity = NEW.quantity THEN -- удаляем запись
                    DELETE FROM public.total_quantity_and_avg_price_instrument_account
                    WHERE id = existing_row.id;
                ELSE -- обновляем запись
                    UPDATE public.total_quantity_and_avg_price_instrument_account
                    SET 
                        total_quantity = existing_row.total_quantity - NEW.quantity,
                        avg_price = (existing_row.avg_price * existing_row.total_quantity - NEW.price * NEW.quantity) / (existing_row.total_quantity - NEW.quantity)
                    WHERE id = existing_row.id;
                END IF;
            END IF;
        END IF;

        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE TRIGGER instrument_total_quantity_and_avg_price_trigger
    AFTER INSERT OR UPDATE ON public.instrument
    FOR EACH ROW
    EXECUTE FUNCTION update_total_quantity_and_avg_price();

-----------------------------------------------------------------------------------------------------------------------------------------------------
А НУЖЕН ЛИ МНЕ ЭТОТ ТРИГГЕР, ВРОДЕ НЕТ, ПОКА УДАЛИЛ ЕГО В БД
ПРОМТ(Если ты создал счёт, то у тебя добавляется инструмент с количеством денег в рублях)
    Напиши триггер для базы данных posgresql, который будет выполняться следующую логику:

    Если добавляется запись в таблицу account, то срабатывает триггер и создаёт запись в таблице instrumet, в которой заполняются поля следующим образом:
    -intrument_name="RUB"
    -price=1.0
    -currency_id=5
    -quantity=1
    -instrument_type_id=3
    -account_id(совпадает с полем id в таблице account созданной записи)
    -operation_type_id=1

    Есть таблица в базе данных posgresql созданная скриптом, из которой необходимо будет взять данные:
    CREATE TABLE public.account (
        id serial4 NOT NULL,
        account_name varchar NOT NULL,
        broker_name varchar NOT NULL,
        "date" timestamp NULL,
        user_id int4 NULL,
        CONSTRAINT account_pkey PRIMARY KEY (id),
        CONSTRAINT account_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id)
    );

    Есть таблица в которую триггер должен вносить значения, сделанная с помощью скрипта:
    CREATE TABLE public.instrument (
        id serial4 NOT NULL,
        instrument_name varchar NOT NULL,
        price float8 NOT NULL,
        currency_id int4 NOT NULL,
        quantity int4 NOT NULL,
        figi varchar NULL,
        "date" timestamp NULL,
        instrument_type_id int4 NOT NULL,
        account_id int4 NOT NULL,
        operation_type_id int4 NOT NULL,
        CONSTRAINT instrument_pkey PRIMARY KEY (id),
        CONSTRAINT instrument_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.account(id),
        CONSTRAINT instrument_currency_id_fkey FOREIGN KEY (currency_id) REFERENCES public.currency_type(id),
        CONSTRAINT instrument_instrument_type_id_fkey FOREIGN KEY (instrument_type_id) REFERENCES public.instrument_type(id),
        CONSTRAINT instrument_operation_type_id_fkey FOREIGN KEY (operation_type_id) REFERENCES public.operation_type(id)
    );


--Сам триггер, который при создании счёта добавляет инструмент RUB и с количеством 0, тип у пользователя 0 денег:
    CREATE OR REPLACE FUNCTION add_instrument()
    RETURNS TRIGGER AS $$
    BEGIN
    IF (TG_OP = 'INSERT' AND TG_TABLE_NAME = 'account') THEN
        INSERT INTO instrument (instrument_name, price, currency_id, quantity, instrument_type_id, account_id, operation_type_id)
        VALUES ('RUB', 1.0, 5, 1, 3, NEW.id, 1);
    END IF;
    RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE TRIGGER account_insert_trigger
    AFTER INSERT ON account
    FOR EACH ROW
    EXECUTE FUNCTION add_instrument();
-----------------------------------------------------------------------------------------------------------------------------------------------------

ПРОМТ(Появляется эксепшн при условии если ты продал, больше чем купил)
    Напиши один триггер для базы данных posgresql, который будет выполняться следующую логику:

    Если добавляется запись с типом операции операцией operation_type_id=2 в таблицу instrument, то срабатывает триггер и смотрит, есть ли уже записи с совпадающими полями в таблице total_quantity_and_avg_price_instrument_account:
    -именем(instrument_name)
    -счётом(account_id)
    Если в добавляемой записи значение в поле quantity из таблицы instrument больше значения total_quantity total_quantity_and_avg_price_instrument_account, то отменить выполнение операции добавления записи в таблицу instrument

    Есть таблица в базе данных posgresql созданная скриптом, из которой необходимо будет взять данные для хранимой процедуры:
    CREATE TABLE public.instrument (
    id serial4 NOT NULL,
    instrument_name varchar NOT NULL,
    price float8 NOT NULL,
    currency_id int4 NOT NULL,
    quantity int4 NULL,
    figi varchar NULL,
    "date" timestamp NULL,
    instrument_type_id int4 NOT NULL,
    account_id int4 NULL,
    CONSTRAINT instrument_pkey PRIMARY KEY (id),
    CONSTRAINT instrument_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.account(id),
    CONSTRAINT instrument_currency_id_fkey FOREIGN KEY (currency_id) REFERENCES public.currency_type(id),
    CONSTRAINT instrument_instrument_type_id_fkey FOREIGN KEY (instrument_type_id) REFERENCES public.instrument_type(id)
    );
    Есть таблица В которую триггер должен вносить значения, сделанная с помощью скрипта:
    CREATE TABLE public.total_quantity_and_avg_price_instrument_account (
    id serial4 NOT NULL,
    instrument_name varchar,
    --figi varchar ,
    total_quantity int4 ,
    avg_price float8 ,
    currency_id int4 ,
    account_id int4 ,
    instrument_type_id int4 ,
    CONSTRAINT total_quantity_and_avg_price_instrument_account_pkey PRIMARY KEY (id),
    CONSTRAINT total_quantity_and_avg_price_instrument_account_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.account(id)
    );

Сам триггер:
    CREATE OR REPLACE FUNCTION check_quantity_trigger() RETURNS TRIGGER AS $$
    DECLARE
    v_total_quantity numeric;
    BEGIN
    IF NEW.operation_type_id = 2 THEN
        SELECT total_quantity INTO STRICT v_total_quantity
        FROM total_quantity_and_avg_price_instrument_account
        WHERE instrument_name = NEW.instrument_name AND account_id = NEW.account_id;
        IF NEW.quantity > v_total_quantity THEN
        RAISE EXCEPTION 'QUANTITY EXCEEDS TOTAL QUANTITY IN TOTAL_QUANTITY_AND_AVG_PRICE_INSTRUMENT_ACCOUNT. КРЧ ТЫ ПРОДАЕШЬ БОЛЬШЕ ЧЕМ КУПИЛ. ТАК НИЗЯ!!!';
        END IF;
    END IF;
    RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE TRIGGER check_quantity
    BEFORE INSERT ON instrument
    FOR EACH ROW
    EXECUTE FUNCTION check_quantity_trigger();
--------------------------------------------------------------------------------------------------------------------------------------
ПРОМТ(Триггер не даёт добавить инструмент с нулевыми количеством и ценой)
    Напиши один триггер для базы данных posgresql, который будет выполняться следующую логику:

    Если добавляется запись с в таблицу instrument, то срабатывает триггер и 
    если в добавляемой записи значение в поле quantity=0 или price=0.0 , то отменить выполнение операции добавления записи в таблицу instrument

    Есть таблица в базе данных posgresql созданная скриптом, из которой необходимо будет взять данные для хранимой процедуры:
    CREATE TABLE public.instrument (
    id serial4 NOT NULL,
    instrument_name varchar NOT NULL,
    price float8 NOT NULL,
    currency_id int4 NOT NULL,
    quantity int4 NULL,
    figi varchar NULL,
    "date" timestamp NULL,
    instrument_type_id int4 NOT NULL,
    account_id int4 NULL,
    CONSTRAINT instrument_pkey PRIMARY KEY (id),
    CONSTRAINT instrument_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.account(id),
    CONSTRAINT instrument_currency_id_fkey FOREIGN KEY (currency_id) REFERENCES public.currency_type(id),
    CONSTRAINT instrument_instrument_type_id_fkey FOREIGN KEY (instrument_type_id) REFERENCES public.instrument_type(id)
    );

Триггер:
    CREATE OR REPLACE FUNCTION prevent_zero_values()
    RETURNS TRIGGER AS $$
    BEGIN
        IF (NEW.quantity = 0 OR NEW.price = 0.0) THEN
            RAISE EXCEPTION 'Cannot insert record with zero quantity or price. КОЛИЧЕТСВО ИЛИ ЦЕНА=0';
        END IF;
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE TRIGGER prevent_zero_values_trigger
    BEFORE INSERT ON public.instrument
    FOR EACH ROW
    EXECUTE FUNCTION prevent_zero_values();
    
--------------------------------------------------------------------------------------------------------------------------------------

ПРОМТ(При добавление инструмента снимаются и добавляются деньги. Если денег не было в нужной валюте, то падает ошибка, правда не выводится как надо
        котировки берутся из среднего валюты, которая уже есть на счёте(этого в промте нет, но скрипт триггера обновлён)
    Напиши один триггер для базы данных posgresql, который будет выполняться следующую логику:

    Если добавляется запись в таблицу instrument и operation_type_id=1 и intrument_name не равен "RUB","EUR","USD", "CHY", "HKD" , 
    и в таблице total_quantity_and_avg_price_instrument_account существует запись где, 
    -instrument_name="RUB" или "EUR" или "USD" или "CHY" или "HKD"
    -account_id (совпадает с полем account_id в таблице instrument добавляемой записи),
    то 
    Создаётся запись в таблице instrument, в которой 
    -intrument_name="RUB", если currency_id=5, ="EUR", если currency_id=1, ="USD", если currency_id=2, ="CHY", если currency_id=3, ="HKD", если currency_id=4 из добавляемой записи
    -price= avg_price из таблицы total_quantity_and_avg_price_instrument_account
    -currency_id (совпадает с полем currency_id в таблице instrument добавляемой записи)
    -quantity (price умножить на quantity в таблице instrument добавляемой записи)
    -instrument_type_id (совпадает с полем instrument_type_id в таблице instrument добавляемой записи)
    -account_id (совпадает с полем account_id в таблице instrument добавляемой записи)
    -operation_type_id=2
      
    Иначе если в таблице total_quantity_and_avg_price_instrument_account не существует запись где, 
    -instrument_name="RUB" или "EUR" или "USD" или "CHY" или "HKD"
    -account_id (совпадает с полем account_id в таблице instrument добавляемой записи)
     то отменить выполнение операции добавления записи в таблицу instrument: "На вашем счёте не хватает денег в выбранной валюте"

    Если добавляется запись в таблицу instrument и operation_type_id=2 и intrument_name не равен "RUB","EUR","USD", "CHY", "HKD" , 
    и в таблице total_quantity_and_avg_price_instrument_account существует запись где и, 
    -instrument_name="RUB" или "EUR" или "USD" или "CHY" или "HKD"
    -account_id (совпадает с полем account_id в таблице instrument добавляемой записи),
    , то 
    Создаётся запись в таблице instrument, в которой 
    -intrument_name="RUB", если currency_id=5, ="EUR", если currency_id=1, ="USD", если currency_id=2, ="CHY", если currency_id=3, ="HKD", если currency_id=4 из добавляемой записи
    -price=price= avg_price из таблицы total_quantity_and_avg_price_instrument_account
    -currency_id (совпадает с полем currency_id в таблице instrument добавляемой записи)
    -quantity (price умножить на quantity в таблице instrument добавляемой записи)
    -instrument_type_id (совпадает с полем instrument_type_id в таблице instrument добавляемой записи)
    -account_id (совпадает с полем account_id в таблице instrument добавляемой записи)
    -operation_type_id=1

    Есть таблица в базе данных posgresql созданная скриптом, из которой необходимо будет взять данные для хранимой процедуры и записать в неё же:
    CREATE TABLE public.instrument (
    id serial4 NOT NULL,
    instrument_name varchar NOT NULL,
    price float8 NOT NULL,
    currency_id int4 NOT NULL,
    quantity int4 NULL,
    figi varchar NULL,
    "date" timestamp NULL,
    instrument_type_id int4 NOT NULL,
    account_id int4 NULL,
    CONSTRAINT instrument_pkey PRIMARY KEY (id),
    CONSTRAINT instrument_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.account(id),
    CONSTRAINT instrument_currency_id_fkey FOREIGN KEY (currency_id) REFERENCES public.currency_type(id),
    CONSTRAINT instrument_instrument_type_id_fkey FOREIGN KEY (instrument_type_id) REFERENCES public.instrument_type(id)
    );

    Есть таблица в базе данных posgresql созданная скриптом, из которой необходимо будет взять данные для хранимой процедуры
    CREATE TABLE public.total_quantity_and_avg_price_instrument_account (
	id serial4 NOT NULL,
	instrument_name varchar NULL,
	total_quantity int4 NULL,
	avg_price float8 NULL,
	currency_id int4 NULL,
	account_id int4 NULL,
	instrument_type_id int4 NULL,
	CONSTRAINT total_quantity_and_avg_price_instrument_account_pkey PRIMARY KEY (id),
	CONSTRAINT total_quantity_and_avg_price_instrument_account_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.account(id)
     );

Сам триггер: пока не доделан, если нет доллорового счёта, то разрешает добавление акций в долларах
CREATE OR REPLACE FUNCTION public.insert_instrument()
 RETURNS trigger

 LANGUAGE plpgsql
AS $function$
DECLARE
    cur_rate float8;
BEGIN
    IF NEW.operation_type_id = 1 AND NEW.instrument_name NOT IN ('RUB', 'EUR', 'USD', 'CHY', 'HKD') THEN
        IF EXISTS (
            SELECT 1 
            FROM public.total_quantity_and_avg_price_instrument_account 
            WHERE instrument_name IN ('RUB', 'EUR', 'USD', 'CHY', 'HKD') 
                AND account_id = NEW.account_id
        ) then
            -- получаем курс валюты из таблицы currency_type
        	SELECT avg_price INTO cur_rate 
			FROM total_quantity_and_avg_price_instrument_account 
			WHERE currency_id = NEW.currency_id AND instrument_name IN ('RUB', 'EUR', 'USD', 'CHY', 'HKD');
            INSERT INTO public.instrument (
                instrument_name, 
                price, 
                currency_id, 
                quantity, 
                instrument_type_id, 
                account_id, 
                operation_type_id
            ) VALUES (
                CASE NEW.currency_id 
                    WHEN 5 THEN 'RUB' 
                    WHEN 1 THEN 'EUR'
                    WHEN 2 THEN 'USD'
                    WHEN 3 THEN 'CHY'
                    WHEN 4 THEN 'HKD'
                END,
                cur_rate,
                NEW.currency_id,
                NEW.price * NEW.quantity,
                NEW.instrument_type_id,
                NEW.account_id,
                2
            );
        ELSE
            RAISE EXCEPTION 'На вашем счёте не хватает денег в выбранной валюте';
            RETURN NULL;
        END IF;
    ELSIF NEW.operation_type_id = 2 AND NEW.instrument_name NOT IN ('RUB', 'EUR', 'USD', 'CHY', 'HKD') THEN
        IF EXISTS (
            SELECT 1 
            FROM public.total_quantity_and_avg_price_instrument_account 
            WHERE instrument_name IN ('RUB', 'EUR', 'USD', 'CHY', 'HKD') 
                AND account_id = NEW.account_id
        ) then
            -- получаем курс валюты из таблицы currency_type
        	SELECT avg_price INTO cur_rate 
			FROM total_quantity_and_avg_price_instrument_account 
			WHERE currency_id = NEW.currency_id AND instrument_name IN ('RUB', 'EUR', 'USD', 'CHY', 'HKD');
            INSERT INTO public.instrument (
                instrument_name, 
                price, 
                currency_id, 
                quantity, 
                instrument_type_id, 
                account_id, 
                operation_type_id
            ) VALUES (
                CASE NEW.currency_id 
                    WHEN 5 THEN 'RUB' 
                    WHEN 1 THEN 'EUR'
                    WHEN 2 THEN 'USD'
                    WHEN 3 THEN 'CHY'
                    WHEN 4 THEN 'HKD'
                END,
                cur_rate,
                NEW.currency_id,
                NEW.price * NEW.quantity,
                NEW.instrument_type_id,
                NEW.account_id,
                1
            );
        END IF;
    END IF;
    RETURN NEW;
END;
$function$
;
CREATE TRIGGER insert_instrument_trigger
AFTER INSERT ON public.instrument
FOR EACH ROW
EXECUTE FUNCTION insert_instrument();

--------------------------------------------------------------------------------------------------------------------------------------





